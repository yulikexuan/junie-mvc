import { type CollectFn } from '@redocly/openapi-core/src/utils';
import { type TestDescription } from '../../types';
export declare function bundleArazzo(filePath: string, collectSpecData?: CollectFn): Promise<Partial<Pick<import("../../types").RuntimeExpressionContext & {
    executedSteps: (import("../../types").Step | import("../../types").WorkflowExecutionResult)[];
    arazzo: string;
    info: import("../../types").InfoObject & Record<string, any>;
    sourceDescriptions?: import("../../types").SourceDescription[];
    workflows: import("../../types").Workflow[];
    options: import("../../types").AppOptions;
    testDescription: TestDescription;
    harLogs: any;
    components?: Record<string, any>;
    secretFields?: Set<string>;
    severity: Record<string, import("@redocly/openapi-core").RuleSeverity>;
    mtlsCerts?: {
        clientCert?: string;
        clientKey?: string;
        caCert?: string;
    };
    apiClient: import("../../utils/api-fetcher").ApiFetcher;
} & import("../../types").WorkflowInnerContext & import("../../types").StepInnerContext, "arazzo" | "info" | "sourceDescriptions" | "workflows" | "components" | "$outputs">>>;
//# sourceMappingURL=get-test-description-from-file.d.ts.map